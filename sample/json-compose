#!/usr/bin/env ts-node

// Usage:
//    json-compose commandFile optionalParameter
//
// commandFile should be valid JSON. commandFile is read from the filesystem.
// If optionalParameter is not specified, commandFile is output, unchanged (a simple pass-through).

// TODO this must currently be run from the sample root folder
// TODO add TS typings

const fs = require('fs');
const parseArgs = require('minimist');
// https://github.com/substack/minimist

const commandLineOpts = {
}
const argv = parseArgs(process.argv, commandLineOpts);

// Note argv._[0] is ts-node
//      argv._[1] is json-compose

const commandFilename = argv._[2];
const optionalParameter = argv._[3];

const main = () => {
  if (commandFilename) {
    let commandJson = fs.readFileSync(commandFilename, 'utf8');

    // Replace any instances of magicString with optionalParameter (or, if that's missing, empty string.)
    const magicString = '$$'; // something we're not likely to see used for real
    commandJson = commandJson.replace(magicString, optionalParameter);

    const command = JSON.parse(commandJson);

    // Import feature:
    // If the command (from the JSON file) contains params object with an include property, like params: { include: {} },
    // that indicates a request to insert the entire contents of the file whose path is given via the optionalParameter
    // as the value of params.include. This enables this sort of action, where importActivity has an include param: 
    //
    // json-compose importActivity sampleActivity.json.

    const includeRequested = (command.params !== undefined) && (command.params.include !== undefined);
    const inputFilename = optionalParameter;
    if (includeRequested && inputFilename) {
      const inputJson = fs.readFileSync(inputFilename, 'utf8');
      const input = JSON.parse(inputJson);
      command.params.include = input;
    } else if (typeof(include) === 'string') {
      command.params.include = JSON.parse(fs.readFileSync(include, 'utf8'));
    }

    // const output = JSON.stringify(command, null, 4); // pretty-print
    const output = JSON.stringify(command);

    console.log(output);
  } else {
    // TODO better help. This isn't shown when piped to curl anyway...
    const help = `usage:
  json-compose commandFile.json optionalParameter
    logs output to console
  `;
    console.log(help);
  }
}

main();
